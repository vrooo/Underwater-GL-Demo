#version 430 core
const float pi = 3.14159265359f;
const float eps = 0.0000001f;
const float t_offset = 0.001f;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform mat4 M;

struct InVertexData
{
	vec3 position;
	float texCoordU;
	vec3 normal;
	float texCoordV;
};

struct InModelInfo
{
	uint indexOffset;
	uint indexCount;
};

layout (std430, binding = 0) buffer InVertexBuffer
{
	InVertexData inVertices[];
};
layout (std430, binding = 1) buffer InIndexBuffer
{
	unsigned int inIndices[];
};
layout (std430, binding = 2) buffer InModelBuffer
{
	InModelInfo inModels[];
};

layout (std430, binding = 3) buffer OutBuffer
{
	vec4 positions[];
};

bool intersectTriangle(vec3 rayOrigin, vec3 rayDir, vec3 v0, vec3 v1, vec3 v2, out float t)
{
	// https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
	t = 0.0f;
	
	vec3 edge1 = v1 - v0, edge2 = v2 - v0;
	vec3 h = cross(rayDir, edge2);
	float a = dot(edge1, h);
	if (abs(a) < eps)
		return false; // ray parallel to triangle

	float f = 1.0f / a;
	vec3 s = rayOrigin - v0;
	float u = f * dot(s, h);
	if (u < 0.0f || u > 1.0f)
		return false;
	vec3 q = cross(s, edge1);
	float v = f * dot(rayDir, q);
	if (v < 0.0f || u + v > 1.0f)
		return false;

	t = f * dot(edge2, q);
	if (t > eps)
		return true; // ray intersection
	return false; // line intersection, but no ray intersection
}

void main()
{
	int idx = int(gl_GlobalInvocationID.x);
	int idy = int(gl_GlobalInvocationID.y);
	int id = int(idx * gl_NumWorkGroups.y * 32 + idy);

	// TODO: light uniforms
    vec3 lightPos = vec3(0, 10, 0);
	float angle1 = (idx / (gl_NumWorkGroups.x * 32 - 1.0f) - 0.5f) * (2 * pi); // modify this one to change light cone angle
	float sinAngle1 = sin(angle1), cosAngle1 = -cos(angle1);
	float angle2 = (idy / (gl_NumWorkGroups.y * 32 - 1.0f) - 0.5f) * pi;
	float sinAngle2 = sin(angle2), cosAngle2 = -cos(angle2);
	vec3 lightDir = vec3(sinAngle1 * cosAngle2, cosAngle1, sinAngle1 * sinAngle2);

	bool firstFound = false;
	float t = 0.0f, bestT = 0.0f;
//	for (uint i = 0; i < inModels.length(); i++)
//	{
//		uint ind = 0;
//
//	}
	for (uint i = 0; i < inIndices.length(); i += 3)
	{
		vec3 v0 = (M * vec4(inVertices[inIndices[i]].position, 1.0f)).xyz;
		vec3 v1 = (M * vec4(inVertices[inIndices[i + 1]].position, 1.0f)).xyz;
		vec3 v2 = (M * vec4(inVertices[inIndices[i + 2]].position, 1.0f)).xyz;
		if (intersectTriangle(lightPos, lightDir, v0, v1, v2, t))
		{
			if (!firstFound || t < bestT)
			{
				firstFound = true;
				bestT = t;
			}
		}
	}

	//if (id < inVertices.length())
	//	positions[id] = M * vec4(inVertices[id].position, 1.0f);
	positions[id] = vec4(lightPos + (bestT - t_offset) * lightDir, 1.0f);
	//positions[id] = vec4(lightPos + lightDir, 1.0f);
}