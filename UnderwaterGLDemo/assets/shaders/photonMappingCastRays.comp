#version 430 core
const float pi = 3.14159265359f;
const float box_margin = 0.0001f;
const float t_offset = 0.0001f;
const float eps = 1e-7f;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform mat4 M;

struct InVertexData
{
	vec3 position;
	float texCoordU;
	vec3 normal;
	float texCoordV;
};
struct InModelInfo
{
	uint indexOffset, indexCount;
	float minX, maxX;
	float minY, maxY;
	float minZ, maxZ;
};

struct InSurfaceVertexData
{
	vec2 position;
	vec2 texCoord;
};
struct InSurfaceChunkInfo
{
	uint vertexOffset, vertexCount;
	uint indexOffset, indexCount;
	float minX, maxX;
	float minY, maxY;
	float minZ, maxZ;
};

layout (std430, binding = 0) buffer InVertexBuffer
{
	InVertexData inVertices[];
};
layout (std430, binding = 1) buffer InIndexBuffer
{
	uint inIndices[];
};
layout (std430, binding = 2) buffer InModelBuffer
{
	InModelInfo inModels[];
};

uniform mat4 surfaceM;
uniform sampler2D surfaceDisplacementTex;
uniform sampler2D surfaceNormalTex;
// TODO: displacement bool
uniform int surfacePatchCount; // in one dimension

layout (std430, binding = 3) buffer InSurfaceVertexBuffer
{
	InSurfaceVertexData inSurfaceVertices[];
};
layout (std430, binding = 4) buffer InSurfaceIndexBuffer
{
	uint inSurfaceIndices[];
};
layout (std430, binding = 5) buffer InSurfaceChunkBuffer
{
	InSurfaceChunkInfo inSurfaceChunks[];
};

layout (std430, binding = 6) buffer OutBuffer
{
	vec4 positions[];
};

bool intersectTriangle(vec3 rayOrigin, vec3 rayDir, vec3 v0, vec3 v1, vec3 v2, out float t)
{
	// https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
	t = 0.0f;
	
	vec3 edge1 = v1 - v0, edge2 = v2 - v0;
	vec3 h = cross(rayDir, edge2);
	float a = dot(edge1, h);
	if (abs(a) < eps)
		return false; // ray parallel to triangle

	float f = 1.0f / a;
	vec3 s = rayOrigin - v0;
	float u = f * dot(s, h);
	if (u < 0.0f || u > 1.0f)
		return false;
	vec3 q = cross(s, edge1);
	float v = f * dot(rayDir, q);
	if (v < 0.0f || u + v > 1.0f)
		return false;

	t = f * dot(edge2, q);
	if (t > eps)
		return true; // ray intersection
	return false; // line intersection, but no ray intersection
}

bool intersectBox(vec3 rayOrigin, vec3 rayDir, vec3 rayDirInv, vec3 minCorner, vec3 maxCorner)
{
	// https://tavianator.com/2011/ray_box.html
	minCorner -= box_margin;
	maxCorner += box_margin;
	
	float tx1 = (minCorner.x - rayOrigin.x) * rayDirInv.x;
    float tx2 = (maxCorner.x - rayOrigin.x) * rayDirInv.x;

    float tmin = min(tx1, tx2);
    float tmax = max(tx1, tx2);

    float ty1 = (minCorner.y - rayOrigin.y) * rayDirInv.y;
    float ty2 = (maxCorner.y - rayOrigin.y) * rayDirInv.y;

    tmin = max(tmin, min(ty1, ty2));
    tmax = min(tmax, max(ty1, ty2));

	float tz1 = (minCorner.z - rayOrigin.z) * rayDirInv.z;
    float tz2 = (maxCorner.z - rayOrigin.z) * rayDirInv.z;

	tmin = max(tmin, min(tz1, tz2));
    tmax = min(tmax, max(tz1, tz2));

    return tmax >= 0 && tmax >= tmin;
}

void main()
{
	int idx = int(gl_GlobalInvocationID.x);
	int idy = int(gl_GlobalInvocationID.y);
	int id = int(idx * gl_NumWorkGroups.y * 32 + idy);

	// TODO: light uniforms
    vec3 lightPos = vec3(0, 10, 0);
	float angle1 = (idx / (gl_NumWorkGroups.x * 32 - 1.0f) - 0.5f) * (2 * pi); // modify this one to change light cone angle
	float sinAngle1 = sin(angle1), cosAngle1 = -cos(angle1);
	float angle2 = (idy / (gl_NumWorkGroups.y * 32 - 1.0f) - 0.5f) * pi;
	float sinAngle2 = sin(angle2), cosAngle2 = -cos(angle2);
	vec3 lightDir = vec3(sinAngle1 * cosAngle2, cosAngle1, sinAngle1 * sinAngle2);
	vec3 lightDirInv = 1.0f / lightDir; // in current glsl 1/0 = inf

	bool firstFound = false;
	float t = 0.0f, bestT = 0.0f;
	// water
	int patchCountHalfFloor = (surfacePatchCount - 1) / 2;
	for (uint patchId = 0; patchId < surfacePatchCount * surfacePatchCount; patchId++)
	{
		vec2 patchShift = (vec2(patchId % surfacePatchCount, patchId / surfacePatchCount) - patchCountHalfFloor);
		for (uint i = 0; i < inSurfaceChunks.length(); i++)
		{
			InSurfaceChunkInfo chunkInfo = inSurfaceChunks[i];
			vec3 minCorner = (surfaceM * vec4(chunkInfo.minX + patchShift.x,
											  chunkInfo.minY,
											  chunkInfo.minZ + patchShift.y, 1.0f)).xyz;
			vec3 maxCorner = (surfaceM * vec4(chunkInfo.maxX + patchShift.x,
											  chunkInfo.maxY,
											  chunkInfo.maxZ + patchShift.y, 1.0f)).xyz;
			if (intersectBox(lightPos, lightDir, lightDirInv, minCorner, maxCorner))
			{
				for (uint j = 0; j < chunkInfo.indexCount; j += 3)
				{
					uint index = chunkInfo.indexOffset + j;
					InSurfaceVertexData vertexData0 = inSurfaceVertices[inSurfaceIndices[index]];
					InSurfaceVertexData vertexData1 = inSurfaceVertices[inSurfaceIndices[index + 1]];
					InSurfaceVertexData vertexData2 = inSurfaceVertices[inSurfaceIndices[index + 2]];
					vec3 v0 = (surfaceM * vec4(vertexData0.position.x + patchShift.x,
											   texture(surfaceDisplacementTex, vertexData0.texCoord).g,
											   vertexData0.position.y + patchShift.y, 1.0f)).xyz;
					vec3 v1 = (surfaceM * vec4(vertexData1.position.x + patchShift.x,
											   texture(surfaceDisplacementTex, vertexData1.texCoord).g,
											   vertexData1.position.y + patchShift.y, 1.0f)).xyz;
					vec3 v2 = (surfaceM * vec4(vertexData2.position.x + patchShift.x,
											   texture(surfaceDisplacementTex, vertexData2.texCoord).g,
											   vertexData2.position.y + patchShift.y, 1.0f)).xyz;
					if (intersectTriangle(lightPos, lightDir, v0, v1, v2, t))
					{
						if (!firstFound || t < bestT)
						{
							firstFound = true;
							bestT = t;
						}
					}
				}
			}
		}
	}

	// scene
	for (uint i = 0; i < inModels.length(); i++)
	{
		InModelInfo curInfo = inModels[i];
		vec3 minCorner = (M * vec4(curInfo.minX, curInfo.minY, curInfo.minZ, 1.0f)).xyz;
		vec3 maxCorner = (M * vec4(curInfo.maxX, curInfo.maxY, curInfo.maxZ, 1.0f)).xyz;
		if (intersectBox(lightPos, lightDir, lightDirInv, minCorner, maxCorner))
		{
			for (uint j = 0; j < curInfo.indexCount; j += 3)
			{
				uint index = curInfo.indexOffset + j;
				vec3 v0 = (M * vec4(inVertices[inIndices[index]].position, 1.0f)).xyz;
				vec3 v1 = (M * vec4(inVertices[inIndices[index + 1]].position, 1.0f)).xyz;
				vec3 v2 = (M * vec4(inVertices[inIndices[index + 2]].position, 1.0f)).xyz;
				if (intersectTriangle(lightPos, lightDir, v0, v1, v2, t))
				{
					if (!firstFound || t < bestT)
					{
						firstFound = true;
						bestT = t;
					}
				}
			}
		}
	}

	if (!firstFound) bestT = 0.5f;
	positions[id] = vec4(lightPos + (bestT - t_offset) * lightDir, 1.0f);
}