#version 430 core
const float two_pi = 6.28318531;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (rg16ui) uniform readonly usampler2D coordLookupTex;
layout (rg32f) uniform readonly image2D readTex;
layout (r32f) uniform writeonly image2D writeTex; // heightTex
uniform uint N;
uniform uint level;

vec2 twiddle(vec2 q, uint k)
{
	float arg = (two_pi * k) / N;
	float sinarg = sin(arg), cosarg = cos(arg); // TODO: precalc twiddle factors
	return vec2(q.x * cosarg + q.y * sinarg, q.y * cosarg - q.x * sinarg);
}

// TODO: this is mostly ifft_x copied, let's do some goddang includes or defines
void main()
{
	// working on y coord
	// this is for N == fourierGridSize
	ivec2 invocationCoord = ivec2(gl_GlobalInvocationID.xy);
	uvec2 actualCoordY = texelFetch(coordLookupTex, ivec2(invocationCoord.y, level), 0).xy;
	ivec2 pixelCoord1 = ivec2(invocationCoord.x, actualCoordY.x);
	ivec2 pixelCoord2 = ivec2(invocationCoord.x, actualCoordY.y);
	vec2 pixel1 = imageLoad(readTex, pixelCoord1).rg;
	vec2 pixel2 = imageLoad(readTex, pixelCoord2).rg;

	uint k = invocationCoord.y % (N / 2);
	vec2 p = pixel1, q = twiddle(pixel2, k);
	vec2 res1 = p + q, res2 = p - q;

	// conjugate and scale
	res1 = vec2(res1.x, -res1.y) / N;
	res2 = vec2(res2.x, -res2.y) / N;

	imageStore(writeTex, pixelCoord1, vec4(length(res1), 0.0f, 0.0f, 1.0f));
	imageStore(writeTex, pixelCoord2, vec4(length(res2), 0.0f, 0.0f, 1.0f));
}