#version 430 core
#extension GL_ARB_shading_language_include : require

#include "/ifft.glsl"

void main()
{
	// working on y coord
	ivec2 invocationCoord = ivec2(gl_GlobalInvocationID.xy);
	uvec2 actualCoordY = texelFetch(coordLookupTex, ivec2(invocationCoord.y, level), 0).xy;
	ivec2 pixelCoord1 = ivec2(invocationCoord.x, actualCoordY.x);
	ivec2 pixelCoord2 = ivec2(invocationCoord.x, actualCoordY.y);
	vec2 pixel1 = imageLoad(readTex, pixelCoord1).rg;
	vec2 pixel2 = imageLoad(readTex, pixelCoord2).rg;

	if (level == 0)
	{
		ivec2 writeCoord1 = invocationCoord;
		ivec2 writeCoord2 = ivec2(writeCoord1.x, writeCoord1.y + fourierGridSize / 2);
		// write from pixelCoordK to writeCoordK (conjugated)
		imageStore(writeTex, writeCoord1, vec4(pixel1.r, -pixel1.g, 0.0f, 1.0f));
		imageStore(writeTex, writeCoord2, vec4(pixel2.r, -pixel2.g, 0.0f, 1.0f));
	}
	else
	{
		vec4 res = pass(pixel1, pixel2, invocationCoord.y);
		vec2 res1 = res.xy, res2 = res.zw;
		// we're not doing N == fourierGridSize with this shader
		imageStore(writeTex, pixelCoord1, vec4(res1, 0.0f, 1.0f));
		imageStore(writeTex, pixelCoord2, vec4(res2, 0.0f, 1.0f));
	}
}