#version 430 core
const float gridCellSize = 0.1f;
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (rg32f) uniform readonly image2D heightTex;
layout (rgba32f) uniform writeonly image2D normalHeightTex;
uniform uint fourierGridSize;

void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	int N = int(fourierGridSize);

    int xCen = pixelCoord.x, yCen = pixelCoord.y;
	int xPos = int(mod(pixelCoord.x + 1, N));
	int xNeg = int(mod(pixelCoord.x - 1, N));
    int yPos = int(mod(pixelCoord.y + 1, N));
	int yNeg = int(mod(pixelCoord.y - 1, N));

	float tl = imageLoad(heightTex, ivec2(xNeg, yNeg)).r;
    float cl = imageLoad(heightTex, ivec2(xNeg, yCen)).r;
    float bl = imageLoad(heightTex, ivec2(xNeg, yPos)).r;
    float ct = imageLoad(heightTex, ivec2(xCen, yNeg)).r;
    float cb = imageLoad(heightTex, ivec2(xCen, yPos)).r;
    float tr = imageLoad(heightTex, ivec2(xPos, yNeg)).r;
    float cr = imageLoad(heightTex, ivec2(xPos, yCen)).r;
    float br = imageLoad(heightTex, ivec2(xPos, yPos)).r;

    // sobel
    float sobelX = (tr + 2.0 * cr + br) - (tl + 2.0 * cl + bl);
    float sobelY = 0.1f;
    float sobelZ = (bl + 2.0 * cb + br) - (tl + 2.0 * ct + tr);

    vec4 normalHeight = vec4(normalize(vec3(sobelX, sobelY, sobelZ)), imageLoad(heightTex, pixelCoord));
    imageStore(normalHeightTex, pixelCoord, normalHeight);
}