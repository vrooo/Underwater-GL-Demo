#version 430 core
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (rg32f) uniform readonly image2D heightTex;
layout (rgba32f) uniform writeonly image2D normalHeightTex;
uniform uint fourierGridSize;

void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	int N = int(fourierGridSize);

	int offsetXPlus = (pixelCoord.x + 1) % N;
	int offsetXMinus = pixelCoord.x == 0 ? N - 1 : pixelCoord.x - 1;
	int offsetYPlus = (pixelCoord.y + 1) % N;
	int offsetYMinus = pixelCoord.y == 0 ? N - 1 : pixelCoord.y - 1;

	float pixelXPlus = imageLoad(heightTex, ivec2(offsetXPlus, pixelCoord.y)).r;
	float pixelXMinus = imageLoad(heightTex, ivec2(offsetXMinus, pixelCoord.y)).r;
	float pixelYPlus = imageLoad(heightTex, ivec2(pixelCoord.x, offsetYPlus)).r;
	float pixelYMinus = imageLoad(heightTex, ivec2(pixelCoord.x, offsetYMinus)).r;

	float gridCellSize = 0.5f;
	vec3 tan1 = normalize(vec3(gridCellSize, pixelXPlus - pixelXMinus, 0.0f));
	vec3 tan2 = normalize(vec3(0.0f, pixelYPlus - pixelYMinus, gridCellSize));
	vec4 normalHeight = vec4(cross(tan1, tan2), imageLoad(heightTex, pixelCoord));
	imageStore(normalHeightTex, pixelCoord, normalHeight);
}