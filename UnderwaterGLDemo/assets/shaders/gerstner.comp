#version 430 core
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (rgba32f) uniform readonly image2D waveTex;
layout (rgba32f) uniform writeonly image2D displacementTex;
layout (rgba32f) uniform writeonly image2D normalTex;
uniform int texResolution;
uniform int waveCount;
uniform float t;

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (pixelCoord.x >= texResolution || pixelCoord.y >= texResolution) return;

    vec2 positionCoord = pixelCoord / float(texResolution - 1) - 0.5f;
    vec3 position = vec3(positionCoord.x, 0.0f, positionCoord.y);
    vec3 displacement = vec3(0.0f);
    vec3 normal = vec3(0.0f, 1.0f, 0.0f);
    // TODO: more like GPU Gems?
    for (int i = 0; i < waveCount; i++)
    {
        vec4 wave1 = imageLoad(waveTex, ivec2(i, 0)); // kNorm.x, kNorm.y, k, amplitude
        vec4 wave2 = imageLoad(waveTex, ivec2(i, 1)); // omega, phase shift, 0, 0
        float amp = wave1.w, omega = wave2.x, phShift = wave2.y;
        vec2 kNorm = wave1.xy, kVec = wave1.z * kNorm;
        float phase = kVec.x * position.x + kVec.y * position.z - omega * t + phShift;
        float sinp = sin(phase), cosp = cos(phase);
        vec2 disp = kNorm * amp * sinp;

        displacement += vec3(-disp.x, amp * cosp, -disp.y);

        vec2 normalDisp = kNorm * amp * omega * cosp;
        normal.x += normalDisp.x;
        normal.y += amp * omega * sinp;
        normal.z += normalDisp.y;
    }

    imageStore(displacementTex, pixelCoord, vec4(displacement, 1.0f));
    imageStore(normalTex, pixelCoord, vec4(normal, 1.0f));
}