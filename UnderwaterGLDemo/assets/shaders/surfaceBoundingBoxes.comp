#version 430 core
layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in; // TODO: variable local size

struct InSurfaceVertexData
{
	vec2 position;
	vec2 texCoord;
};
struct InSurfaceChunkInfo
{
	uint vertexOffset, vertexCount;
	uint indexOffset, indexCount;
	float minX, maxX;
	float minY, maxY;
	float minZ, maxZ;
};

layout (std430, binding = 0) buffer InSurfaceVertexBuffer
{
	InSurfaceVertexData inSurfaceVertices[];
};
layout (std430, binding = 1) buffer InSurfaceChunkBuffer
{
	InSurfaceChunkInfo inSurfaceChunks[];
};

uniform sampler2D displacementTex;

void main()
{
    int chunkIndex = int(gl_GlobalInvocationID.x);
    InSurfaceChunkInfo chunkInfo = inSurfaceChunks[chunkIndex];
    // TODO: add displacement

    InSurfaceVertexData v = inSurfaceVertices[chunkInfo.vertexOffset];
    float minHeight = texture(displacementTex, v.texCoord).y, maxHeight = minHeight;
    for (uint i = 1; i < chunkInfo.vertexCount; i++)
    {
        v = inSurfaceVertices[chunkInfo.vertexOffset + i];
        float height = texture(displacementTex, v.texCoord).y;
        minHeight = min(minHeight, height);
        maxHeight = max(maxHeight, height);
    }

    chunkInfo.minY = minHeight;
    chunkInfo.maxY = maxHeight;
    inSurfaceChunks[chunkIndex] = chunkInfo;
}